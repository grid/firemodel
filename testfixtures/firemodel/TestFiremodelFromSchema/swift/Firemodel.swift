// DO NOT EDIT - Code generated by firemodel (dev).

import Foundation
import Pring

@objc enum TestEnum: Int {
    case left
    case right
    case up
    case down
}

extension TestEnum: CustomDebugStringConvertible {
    init?(firestoreValue value: Any?) {
        guard let value = value as? String else {
            return nil
        }
        switch value {
        case "LEFT":
            self = .left
        case "RIGHT":
            self = .right
        case "UP":
            self = .up
        case "DOWN":
            self = .down
        default:
            return nil
        }
    }

    var firestoreValue: String? {
        switch self {
        case .left:
            return "LEFT"
        case .right:
            return "RIGHT"
        case .up:
            return "UP"
        case .down:
            return "DOWN"
        }
    }

    var debugDescription: String { return firestoreValue ?? "<INVALID>" }
}

@objcMembers class TestStruct: Pring.Object {
    var where: String?
    var howMuch: Int = 0
    var someEnum: TestEnum?

    override func encode(_ key: String, value: Any?) -> Any? {
        switch key {
        case "someEnum":
            return self.someEnum?.firestoreValue
        default:
            break
        }
        return nil
    }

    override func decode(_ key: String, value: Any?) -> Bool {
        switch key {
        case "someEnum":
            self.someEnum = TestEnum(firestoreValue: value)
        default:
            break
        }
        return false
    }
}

// A Test is a test model.
@objcMembers class TestModel: Pring.Object {
override class var path: String { return "test_models" }
    // The name.
    dynamic var name: String?
    // The age.
    dynamic var age: Int = 0
    // The number pi.
    dynamic var pi: Float = 0
    // The birth date.
    dynamic var birthdate: Date?
    // True if it is good.
    dynamic var isGood: Bool = false
    dynamic var data: Data?
    dynamic var friend: Pring.Reference<TestModel> = .init()
    dynamic var location: Pring.GeoPoint?
    dynamic var colors: [String]?
    dynamic var numbers: [Int]?
    dynamic var bools: [Bool]?
    dynamic var doubles: [Float]?
    dynamic var directions: [TestEnum]?
    dynamic var models: [TestStruct]?
    dynamic var models2: [TestStruct]?
    dynamic var refs: [Pring.AnyReference] = .init()
    dynamic var modelRefs: [Any] = .init()
    dynamic var meta: [String: Any] = [:]
    dynamic var metaStrs: [String: String] = [:]
    dynamic var direction: TestEnum?
    dynamic var testFile: Pring.File?
    dynamic var url: URL?
    dynamic var nested: TestStruct?
    dynamic var nestedCollection: Pring.NestedCollection<TestModel> = []

    override func encode(_ key: String, value: Any?) -> Any? {
        switch key {
        case "direction":
            return self.direction?.firestoreValue
        case "models":
            return self.models?.map { $0.rawValue }
        case "models2":
            return self.models2?.map { $0.rawValue }
        case "nested":
            return self.nested?.rawValue
        case "directions":
            return self.directions?.map { $0.firestoreValue }
        default:
            break
        }
        return nil
    }

    override func decode(_ key: String, value: Any?) -> Bool {
        switch key {
        case "direction":
            self.direction = TestEnum(firestoreValue: value)
        case "models":
            self.models = (value as? [[String: Any]])?
                .enumerated()
                .map { TestStruct(id: "models.\($0.offset)", value: $0.element) }
        case "models2":
            self.models2 = (value as? [[String: Any]])?
                .enumerated()
                .map { TestStruct(id: "models2.\($0.offset)", value: $0.element) }
        case "nested":
          if let value = value as? [String: Any] {
            self.nested = TestStruct(id: "\(0)", value: value)
            return true
          }
        case "directions":
            self.directions = (value as? [String])?.compactMap { TestEnum(firestoreValue: $0) }
			return true
        default:
            break
        }
        return false
    }
}

@objcMembers class TestTimestamps: Pring.Object {
override class var path: String { return "timestamps" }
}

@objcMembers class Test: Pring.Object {
    dynamic var direction: TestEnum?

    override func encode(_ key: String, value: Any?) -> Any? {
        switch key {
        case "direction":
            return self.direction?.firestoreValue
        default:
            break
        }
        return nil
    }

    override func decode(_ key: String, value: Any?) -> Bool {
        switch key {
        case "direction":
            self.direction = TestEnum(firestoreValue: value)
        default:
            break
        }
        return false
    }
}
