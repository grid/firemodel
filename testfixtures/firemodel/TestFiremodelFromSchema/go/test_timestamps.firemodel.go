// DO NOT EDIT - Code generated by firemodel (dev).

package firemodel

import (
	"fmt"
	"regexp"
	"time"
)

// TODO: Add comment to TestTimestamps in firemodel schema.
//
// Firestore document location: /timestamps/{test_timestamps_id}
type TestTimestamps struct {

	// Creation timestamp.
	CreatedAt time.Time `firestore:"createdAt"`
	// Update timestamp.
	UpdatedAt time.Time `firestore:"updatedAt"`
}

// TestTimestampsPath returns the path to a particular TestTimestamps in Firestore.
func TestTimestampsPath(testTimestampsId string) string {
	return fmt.Sprintf("timestamps/%s", testTimestampsId)
}

// TestTimestampsRegexPath is a regex that can be use to filter out firestore events of TestTimestamps
var TestTimestampsRegexPath = regexp.MustCompile("^timestamps/([a-zA-Z0-9]+)$")

// TestTimestampsRegexNamedPath is a named regex that can be use to filter out firestore events of TestTimestamps
var TestTimestampsRegexNamedPath = regexp.MustCompile("^timestamps/(?P<test_timestamps_id>[a-zA-Z0-9]+)$")

// TestTimestampsPathStruct is a struct that contains parts of a path of TestTimestamps
type TestTimestampsPathStruct struct {
	TestTimestampsId string
}

// TestTimestampsPathToStruct is a function that turns a firestore path into a PathStruct of TestTimestamps
func TestTimestampsPathToStruct(path string) TestTimestampsPathStruct {
	parsed := TestTimestampsRegexPath.FindStringSubmatch(path)
	result := &TestTimestampsPathStruct{TestTimestampsId: parsed[0]}
}

// TestTimestampsStructToPath is a function that turns a PathStruct of TestTimestamps into a firestore path
func TestTimestampsStructToPath(path TestTimestampsPathStruct) string {
	built := fmt.Sprintf("timestamps/%s", path.TestTimestampsId)
	return built
}

// TestTimestampsWrapper is a struct wrapper that contains a reference to the firemodel instance and the path
type TestTimestampsWrapper struct {
	TestTimestamps *TestTimestamps
	Path           TestTimestampsPathStruct
	PathStr        string
}
